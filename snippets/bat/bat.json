{
  "Batch Header": {
    "prefix": "bh",
    "description": "Basic batch file header with UTF-8 and delayed expansion",
    "body": [
      "@echo off",
      "chcp 65001 > nul",
      "setlocal ${2|enabledelayedexpansion,disabledelayedexpansion|}",
      "",
      "rem ${1:Script description}",
      "",
      "$0"
    ]
  },
  "Check Admin Privileges": {
    "prefix": "sadmincheck",
    "description": "Check if the script is running with admin privileges",
    "body": [
      ">nul 2>&1 net session || (",
      "    echo This script requires admin privileges.",
      "    exit /b 1",
      ")"
    ]
  },
  "Check Available Disk Space": {
    "prefix": "sdiskchk",
    "description": "Check available disk space on a drive",
    "body": [
      "for /f \"tokens=3\" %%a in ('fsutil volume diskfree ${1:C:}') do (",
      "    set free_space=%%a",
      ")",
      "echo Available disk space: %free_space%"
    ]
  },
  "Check Error Level": {
    "prefix": "bechk",
    "description": "Check error level with comparison operators",
    "body": [
      "if %errorlevel% ${1|geq,leq,equ,neq,gtr,lss|} ${2:number} (",
      "    echo Error level is ${1} ${2}",
      "    $0",
      ")"
    ]
  },
  "Command Arguments": {
    "prefix": "bcargs",
    "description": "Handle command line arguments",
    "body": [
      "if \"%1\"==\"\" (",
      "    echo Usage: %0 <argument>",
      "    exit /b 1",
      ")",
      "set \"arg1=%1\""
    ]
  },
  "Compare strings": {
    "prefix": "bcstr",
    "description": "Compare two strings",
    "body": [
      "if ${1|equ,neq,lss,leq,gtr,geq|} \"${2:string1}\" \"${3:string2}\" (",
      "    $0",
      ")"
    ]
  },
  "Conditional Execution": {
    "prefix": "bccond",
    "description": "Execute command based on previous command's success",
    "body": [
      "${1:first_command} && ${2:success_command} || ${3:failure_command}"
    ]
  },
  "Create Directory": {
    "prefix": "bsdir",
    "description": "Create a directory if it doesn't exist",
    "body": [
      "if not exist \"${1:directoryPath}\" mkdir \"${1:directoryPath}\""
    ]
  },
  "Create Label": {
    "prefix": "flabel",
    "description": "Create a label in the script",
    "body": [
      ":${1:label}"
    ]
  },
  "Else Statement": {
    "prefix": "felse",
    "description": "Else statement for if-else construct",
    "body": [
      ") else (",
      "    $0",
      ")"
    ]
  },
  "Enable Delayed Expansion": {
    "prefix": "sedl",
    "description": "Enable delayed environment variable expansion",
    "body": [
      "setlocal enabledelayedexpansion"
    ]
  },
  "Error Handling": {
    "prefix": "behan",
    "description": "Basic error handling",
    "body": [
      "if errorlevel 1 (",
      "    echo An error occurred",
      "    exit /b 1",
      ")"
    ]
  },
  "File Exists Check": {
    "prefix": "sfchk",
    "description": "Check if a file exists",
    "body": [
      "if exist \"${1:filename}\" (",
      "    echo File exists",
      ") else (",
      "    echo File does not exist",
      ")"
    ]
  },
  "For /D Loop": {
    "prefix": "ffor_d",
    "description": "For /D loop",
    "body": [
      "for /D %%${1:d} in (${2:directory_pattern}) do (",
      "    echo %%${1:d}",
      "    $0",
      ")"
    ]
  },
  "For /F Loop": {
    "prefix": "ffor_f",
    "description": "For /F loop",
    "body": [
      "for /F \"tokens=${1:1}* delims=${2:,}\" %%${3:a} in (${4:file_or_command}) do (",
      "    echo %%${3:a}",
      "    $0",
      ")"
    ]
  },
  "For /L Loop": {
    "prefix": "ffor_l",
    "description": "For /L loop",
    "body": [
      "for /L %%${1:i} in (${2:start},${3:step},${4:end}) do (",
      "    echo %%${1:i}",
      "    $0",
      ")"
    ]
  },
  "For Loop": {
    "prefix": "ffor",
    "description": "For loop",
    "body": [
      "for %%${1:i} in (${2:item1 item2 item3}) do (",
      "    echo %%${1:i}",
      "    $0",
      ")"
    ]
  },
  "Function": {
    "prefix": "ffn",
    "description": "Create a function in batch",
    "body": [
      ":${1:functionName}",
      "$0",
      "goto :eof"
    ]
  },
  "Get Current Date": {
    "prefix": "vdate",
    "description": "Get the current date",
    "body": [
      "for /f \"tokens=1-4 delims=/ \" %%a in ('%DATE%') do (",
      "    set day=%%a",
      "    set month=%%b",
      "    set year=%%c",
      ")",
      "set \"currentDate=%year%-%month%-%day%\"",
      "echo Current date: %currentDate%"
    ]
  },
  "Get Current Time": {
    "prefix": "vtime",
    "description": "Get the current time",
    "body": [
      "for /f \"tokens=1-3 delims=:\" %%a in ('%TIME%') do (",
      "    set hour=%%a",
      "    set minute=%%b",
      "    set second=%%c",
      ")",
      "set \"currentTime=%hour%:%minute%:%second%\"",
      "echo Current time: %currentTime%"
    ]
  },
  "Get Environment Variable": {
    "prefix": "vgetenv",
    "description": "Get an environment variable value",
    "body": [
      "set ${1:variable_name}=%${1:variable_name}%"
    ]
  },
  "Goto End of Script": {
    "prefix": "fgotoe",
    "description": "Go to the end of the script",
    "body": [
      "goto :eof"
    ]
  },
  "Goto Label": {
    "prefix": "fgoto",
    "description": "Jump to a specific label in the script",
    "body": [
      "goto :${1:label}"
    ]
  },
  "If Statement": {
    "prefix": "fif",
    "description": "If-else statement",
    "body": [
      "if ${1:condition} (",
      "    $0",
      ") else (",
      "    $2",
      ")"
    ]
  },
  "Logging to File": {
    "prefix": "llog",
    "description": "Log script output to a file",
    "body": [
      "set \"log_file=${1:logfile}.log\"",
      "echo Logging to %log_file%",
      "echo ${2:Log start message} >> %log_file%",
      "$0",
      "echo ${3:Log end message} >> %log_file%"
    ]
  },
  "Loop over Files": {
    "prefix": "ffiles",
    "description": "Loop over files in directory",
    "body": [
      "for %%f in (${1:*.txt}) do (",
      "    echo Processing %%f",
      "    $0",
      ")"
    ]
  },
  "Pause Script": {
    "prefix": "fpause",
    "description": "Pause the script execution",
    "body": [
      "pause"
    ]
  },
  "Read User Input": {
    "prefix": "vread",
    "description": "Read user input",
    "body": [
      "set /p \"${1:variable}=${2:Enter value: }\""
    ]
  },
  "Retry Block": {
    "prefix": "fretry",
    "description": "Retry block for command execution",
    "body": [
      "set retry_count=0",
      ":retry_loop",
      "set /a retry_count+=1",
      "${1:command}",
      "if errorlevel 1 if %retry_count% lss ${2:retry_limit} (",
      "    echo Retry %retry_count%...",
      "    timeout /t ${3:delay_seconds} > nul",
      "    goto retry_loop",
      ")"
    ]
  },
  "Run Command with Retry": {
    "prefix": "fretrycmd",
    "description": "Run a command with a retry mechanism",
    "body": [
      "set retry_count=0",
      ":retry",
      "set /a retry_count+=1",
      "${1:command}",
      "if errorlevel 1 if %retry_count% lss ${2:retry_limit} (",
      "    echo Retry %retry_count%...",
      "    timeout /t ${3:delay_seconds} > nul",
      "    goto retry",
      ")"
    ]
  },
  "Set Environment Variable": {
    "prefix": "vsetenv",
    "description": "Set an environment variable",
    "body": [
      "setx ${1:variable_name} \"${2:value}\""
    ]
  },
  "Set Variable": {
    "prefix": "vset",
    "description": "Set a variable",
    "body": [
      "set \"${1:variable}=${2:value}\""
    ]
  },
  "Start New Process": {
    "prefix": "sstart",
    "description": "Start a new process",
    "body": [
      "start \"\" ${1:command}"
    ]
  },
  "Terminate Process": {
    "prefix": "sterm",
    "description": "Terminate a process by its name",
    "body": [
      "taskkill /F /IM ${1:process_name}.exe /T"
    ]
  },
  "Timed Command": {
    "prefix": "ftime",
    "description": "Execute a command after a delay",
    "body": [
      "timeout /t ${1:seconds} /nobreak > nul",
      "${2:command}"
    ]
  },
  "Turn Echo Off": {
    "prefix": "sechooff",
    "description": "Turn command-echoing off",
    "body": [
      "@echo off"
    ]
  },
  "Wait for Keypress": {
    "prefix": "fwaitkey",
    "description": "Wait for a keypress",
    "body": [
      "echo Press any key to continue...",
      "pause >nul"
    ]
  },
  "Check if File Locked": {
    "prefix": "sfilelock",
    "description": "Check if a file is locked",
    "body": [
      "(call >nul 2>nul >\"${1:file}\" && echo File is not locked) || echo File is locked"
    ]
  },
  "Check Network Connection": {
    "prefix": "snetcheck",
    "description": "Check network connection status",
    "body": [
      "ping -n 1 ${1:hostname} >nul && echo ${1:hostname} is reachable || echo ${1:hostname} is not reachable"
    ]
  },
  "Download File": {
    "prefix": "sdownload",
    "description": "Download a file using PowerShell",
    "body": [
      "powershell -Command \"(New-Object Net.WebClient).DownloadFile('${1:url}', '${2:file_path}')\""
    ]
  },
  "For /R Loop": {
    "prefix": "ffor_r",
    "description": "For /R loop",
    "body": [
      "for /R \"${1:rootPath}\" %%${2:f} in (${3:file_pattern}) do (",
      "    echo %%${2:f}",
      "    $0",
      ")"
    ]
  },
  "Push Directory": {
    "prefix": "spushd",
    "description": "Push directory onto stack and change to it",
    "body": [
      "pushd \"${1:directory}\"",
      "$0",
      "popd"
    ]
  }
}
